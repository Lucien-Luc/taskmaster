// export.js - Excel Export Manager for Task Data

window.exportManager = {
    // Initialize export functionality
    init: function() {
        console.log('Initializing export manager...');
        this.setupExportButtons();
    },

    // Setup export button event listeners
    setupExportButtons: function() {
        const exportWeekly = document.getElementById('export-weekly');
        const exportMonthly = document.getElementById('export-monthly');
        const exportQuarterly = document.getElementById('export-quarterly');
        const exportAnnual = document.getElementById('export-annual');

        if (exportWeekly) {
            exportWeekly.addEventListener('click', () => {
                this.exportWeeklyData();
            });
        }

        if (exportMonthly) {
            exportMonthly.addEventListener('click', () => {
                this.exportMonthlyData();
            });
        }

        if (exportQuarterly) {
            exportQuarterly.addEventListener('click', () => {
                this.exportQuarterlyData();
            });
        }

        if (exportAnnual) {
            exportAnnual.addEventListener('click', () => {
                this.exportAnnualData();
            });
        }
    },

    // Export weekly data to Excel
    exportWeeklyData: function() {
        if (!window.taskManager || !window.taskViews) {
            window.showNotification('Task data not available', 'error');
            return;
        }

        const currentDate = window.taskManager.currentWeekDate || new Date();
        const weekStart = this.getWeekStart(currentDate);
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);

        // Get filtered tasks for the week
        const weekTasks = window.taskViews.getFilteredTasks().filter(task => {
            const taskDate = new Date(task.dueDate);
            return taskDate >= weekStart && taskDate <= weekEnd;
        });

        const filename = `Weekly_Report_${weekStart.toISOString().split('T')[0]}_to_${weekEnd.toISOString().split('T')[0]}.xlsx`;
        this.exportToExcel(weekTasks, 'Weekly Report', filename);
    },

    // Export monthly data to Excel
    exportMonthlyData: function() {
        if (!window.taskManager || !window.taskViews) {
            window.showNotification('Task data not available', 'error');
            return;
        }

        const currentDate = window.taskManager.currentDate || new Date();
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        // Get filtered tasks for the month
        const monthTasks = window.taskViews.getFilteredTasks().filter(task => {
            const taskDate = new Date(task.dueDate);
            return taskDate.getMonth() === month && taskDate.getFullYear() === year;
        });

        const monthName = new Date(year, month, 1).toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
        const filename = `Monthly_Report_${monthName.replace(' ', '_')}.xlsx`;
        this.exportToExcel(monthTasks, `${monthName} Report`, filename);
    },

    // Export quarterly data to Excel
    exportQuarterlyData: function() {
        if (!window.taskManager || !window.taskViews) {
            window.showNotification('Task data not available', 'error');
            return;
        }

        const quarter = window.taskManager.currentQuarter;
        const year = window.taskManager.currentYear;

        // Get quarter date range
        const quarterStart = new Date(year, (quarter - 1) * 3, 1);
        const quarterEnd = new Date(year, quarter * 3, 0);

        // Get filtered tasks for the quarter
        const quarterTasks = window.taskViews.getFilteredTasks().filter(task => {
            const taskDate = new Date(task.dueDate);
            return taskDate >= quarterStart && taskDate <= quarterEnd;
        });

        const filename = `Quarterly_Report_Q${quarter}_${year}.xlsx`;
        this.exportToExcel(quarterTasks, `Q${quarter} ${year} Report`, filename);
    },

    // Export annual data to Excel
    exportAnnualData: function() {
        if (!window.taskManager || !window.taskViews) {
            window.showNotification('Task data not available', 'error');
            return;
        }

        const year = window.taskManager.currentYear;

        // Get filtered tasks for the year
        const yearTasks = window.taskViews.getFilteredTasks().filter(task => {
            const taskDate = new Date(task.dueDate);
            return taskDate.getFullYear() === year;
        });

        const filename = `Annual_Report_${year}.xlsx`;
        this.exportToExcel(yearTasks, `${year} Annual Report`, filename);
    },

    // Main export function using SheetJS
    exportToExcel: function(tasks, reportTitle, filename) {
        try {
            // Show loading notification
            window.showNotification('Generating Excel file...', 'info');

            // Create workbook
            const wb = XLSX.utils.book_new();

            // Create main tasks worksheet
            const tasksWs = this.createTasksWorksheet(tasks, reportTitle);
            XLSX.utils.book_append_sheet(wb, tasksWs, 'Tasks');

            // Create summary worksheet
            const summaryWs = this.createSummaryWorksheet(tasks, reportTitle);
            XLSX.utils.book_append_sheet(wb, summaryWs, 'Summary');

            // Create analytics worksheet
            const analyticsWs = this.createAnalyticsWorksheet(tasks, reportTitle);
            XLSX.utils.book_append_sheet(wb, analyticsWs, 'Analytics');

            // Write file
            XLSX.writeFile(wb, filename);

            window.showNotification('Excel file downloaded successfully!', 'success');

        } catch (error) {
            console.error('Error exporting to Excel:', error);
            window.showNotification('Error generating Excel file', 'error');
        }
    },

    // Create tasks worksheet with comprehensive data
    createTasksWorksheet: function(tasks, reportTitle) {
        // Prepare data with all task information
        const data = [
            [reportTitle],
            [`Generated on: ${new Date().toLocaleString()}`],
            [`Total Tasks: ${tasks.length}`],
            [], // Empty row
            [
                'ID',
                'Title',
                'Description',
                'Priority',
                'Status',
                'Category',
                'Progress (%)',
                'Assigned Users',
                'Start Date',
                'Due Date',
                'Days Remaining',
                'Is Overdue',
                'Estimated Hours',
                'Tags',
                'Created Date',
                'Last Updated',
                'Creator',
                'Completion Rate'
            ]
        ];

        // Add task data
        tasks.forEach(task => {
            const dueDate = new Date(task.dueDate);
            const today = new Date();
            const daysRemaining = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));
            const isOverdue = daysRemaining < 0;

            data.push([
                task.id || '',
                task.title || '',
                task.description || '',
                task.priority || '',
                task.status || '',
                task.category || '',
                task.progress || 0,
                task.assignedUsers ? task.assignedUsers.join(', ') : '',
                task.startDate ? new Date(task.startDate).toLocaleDateString() : '',
                dueDate.toLocaleDateString(),
                isOverdue ? `${Math.abs(daysRemaining)} days overdue` : `${daysRemaining} days`,
                isOverdue ? 'Yes' : 'No',
                task.estimatedHours || '',
                task.tags ? task.tags.join(', ') : '',
                task.createdAt ? new Date(task.createdAt).toLocaleDateString() : '',
                task.updatedAt ? new Date(task.updatedAt).toLocaleDateString() : '',
                task.creator || '',
                task.status === 'completed' ? '100%' : `${task.progress || 0}%`
            ]);
        });

        // Create worksheet
        const ws = XLSX.utils.aoa_to_sheet(data);

        // Set column widths
        const colWidths = [
            { wch: 15 }, // ID
            { wch: 30 }, // Title
            { wch: 50 }, // Description
            { wch: 10 }, // Priority
            { wch: 12 }, // Status
            { wch: 15 }, // Category
            { wch: 10 }, // Progress
            { wch: 25 }, // Assigned Users
            { wch: 12 }, // Start Date
            { wch: 12 }, // Due Date
            { wch: 15 }, // Days Remaining
            { wch: 10 }, // Is Overdue
            { wch: 12 }, // Estimated Hours
            { wch: 25 }, // Tags
            { wch: 12 }, // Created Date
            { wch: 12 }, // Last Updated
            { wch: 15 }, // Creator
            { wch: 12 }  // Completion Rate
        ];
        ws['!cols'] = colWidths;

        // Style header row
        const headerRowIndex = 4; // 0-based index
        const range = XLSX.utils.decode_range(ws['!ref']);
        for (let col = range.s.c; col <= range.e.c; col++) {
            const cellAddress = XLSX.utils.encode_cell({ r: headerRowIndex, c: col });
            if (!ws[cellAddress]) continue;
            
            ws[cellAddress].s = {
                font: { bold: true, color: { rgb: "FFFFFF" } },
                fill: { fgColor: { rgb: "3B82F6" } },
                alignment: { horizontal: "center" }
            };
        }

        return ws;
    },

    // Create summary worksheet
    createSummaryWorksheet: function(tasks, reportTitle) {
        const summary = this.generateSummaryData(tasks);
        
        const data = [
            [reportTitle + ' - Summary'],
            [`Generated on: ${new Date().toLocaleString()}`],
            [],
            ['Metric', 'Value', 'Percentage'],
            ['Total Tasks', summary.total, '100%'],
            ['Completed Tasks', summary.completed, `${summary.completionRate}%`],
            ['In Progress Tasks', summary.inProgress, `${((summary.inProgress / summary.total) * 100).toFixed(1)}%`],
            ['To Do Tasks', summary.todo, `${((summary.todo / summary.total) * 100).toFixed(1)}%`],
            ['Blocked Tasks', summary.blocked, `${((summary.blocked / summary.total) * 100).toFixed(1)}%`],
            ['Paused Tasks', summary.paused, `${((summary.paused / summary.total) * 100).toFixed(1)}%`],
            ['Overdue Tasks', summary.overdue, `${((summary.overdue / summary.total) * 100).toFixed(1)}%`],
            ['High Priority Tasks', summary.highPriority, `${((summary.highPriority / summary.total) * 100).toFixed(1)}%`],
            [],
            ['Priority Breakdown', '', ''],
            ['Urgent Priority', summary.urgent || 0, `${(((summary.urgent || 0) / summary.total) * 100).toFixed(1)}%`],
            ['High Priority', summary.high || 0, `${(((summary.high || 0) / summary.total) * 100).toFixed(1)}%`],
            ['Medium Priority', summary.medium || 0, `${(((summary.medium || 0) / summary.total) * 100).toFixed(1)}%`],
            ['Low Priority', summary.low || 0, `${(((summary.low || 0) / summary.total) * 100).toFixed(1)}%`],
            [],
            ['Category Breakdown', '', ''],
            ...this.getCategoryBreakdown(tasks),
            [],
            ['Performance Metrics', '', ''],
            ['Average Progress', `${summary.avgProgress}%`, ''],
            ['Total Estimated Hours', summary.totalEstimatedHours, ''],
            ['Completion Rate', `${summary.completionRate}%`, ''],
            ['On-Time Completion Rate', `${this.getOnTimeCompletionRate(tasks)}%`, '']
        ];

        const ws = XLSX.utils.aoa_to_sheet(data);

        // Set column widths
        ws['!cols'] = [
            { wch: 25 }, // Metric
            { wch: 15 }, // Value
            { wch: 15 }  // Percentage
        ];

        return ws;
    },

    // Create analytics worksheet
    createAnalyticsWorksheet: function(tasks, reportTitle) {
        const data = [
            [reportTitle + ' - Analytics'],
            [`Generated on: ${new Date().toLocaleString()}`],
            [],
            ['Task Distribution by User'],
            ['User', 'Total Tasks', 'Completed', 'In Progress', 'Overdue', 'Completion Rate']
        ];

        // User analytics
        const userStats = this.getUserAnalytics(tasks);
        Object.entries(userStats).forEach(([user, stats]) => {
            data.push([
                user,
                stats.total,
                stats.completed,
                stats.inProgress,
                stats.overdue,
                `${stats.completionRate}%`
            ]);
        });

        data.push([]);
        data.push(['Task Timeline Analysis']);
        data.push(['Time Period', 'Tasks Due', 'Completed On Time', 'Overdue', 'On-Time Rate']);

        // Timeline analysis
        const timelineStats = this.getTimelineAnalytics(tasks);
        timelineStats.forEach(period => {
            data.push([
                period.period,
                period.total,
                period.onTime,
                period.overdue,
                `${period.onTimeRate}%`
            ]);
        });

        data.push([]);
        data.push(['Priority vs Completion Analysis']);
        data.push(['Priority', 'Total Tasks', 'Completed', 'Average Days to Complete', 'Completion Rate']);

        // Priority analysis
        const priorityStats = this.getPriorityAnalytics(tasks);
        Object.entries(priorityStats).forEach(([priority, stats]) => {
            data.push([
                priority.toUpperCase(),
                stats.total,
                stats.completed,
                stats.avgDaysToComplete,
                `${stats.completionRate}%`
            ]);
        });

        const ws = XLSX.utils.aoa_to_sheet(data);

        // Set column widths
        ws['!cols'] = [
            { wch: 20 }, // First column
            { wch: 15 }, // Second column
            { wch: 15 }, // Third column
            { wch: 15 }, // Fourth column
            { wch: 15 }, // Fifth column
            { wch: 15 }  // Sixth column
        ];

        return ws;
    },

    // Generate comprehensive summary data
    generateSummaryData: function(tasks) {
        const total = tasks.length;
        const completed = tasks.filter(t => t.status === 'completed').length;
        const inProgress = tasks.filter(t => t.status === 'in-progress').length;
        const todo = tasks.filter(t => t.status === 'todo').length;
        const blocked = tasks.filter(t => t.status === 'blocked').length;
        const paused = tasks.filter(t => t.status === 'paused').length;
        
        const overdue = tasks.filter(t => {
            return t.status !== 'completed' && new Date(t.dueDate) < new Date();
        }).length;
        
        const highPriority = tasks.filter(t => t.priority === 'high' || t.priority === 'urgent').length;
        
        const urgent = tasks.filter(t => t.priority === 'urgent').length;
        const high = tasks.filter(t => t.priority === 'high').length;
        const medium = tasks.filter(t => t.priority === 'medium').length;
        const low = tasks.filter(t => t.priority === 'low').length;
        
        const avgProgress = total > 0 
            ? Math.round(tasks.reduce((sum, task) => sum + (task.progress || 0), 0) / total)
            : 0;

        const totalEstimatedHours = tasks.reduce((sum, task) => {
            return sum + (task.estimatedHours || 0);
        }, 0);

        return {
            total,
            completed,
            inProgress,
            todo,
            blocked,
            paused,
            overdue,
            highPriority,
            urgent,
            high,
            medium,
            low,
            avgProgress,
            totalEstimatedHours,
            completionRate: total > 0 ? Math.round((completed / total) * 100) : 0
        };
    },

    // Get category breakdown
    getCategoryBreakdown: function(tasks) {
        const categories = {};
        tasks.forEach(task => {
            const category = task.category || 'Uncategorized';
            categories[category] = (categories[category] || 0) + 1;
        });

        return Object.entries(categories).map(([category, count]) => [
            category,
            count,
            `${((count / tasks.length) * 100).toFixed(1)}%`
        ]);
    },

    // Get user analytics
    getUserAnalytics: function(tasks) {
        const userStats = {};

        tasks.forEach(task => {
            if (task.assignedUsers && task.assignedUsers.length > 0) {
                task.assignedUsers.forEach(user => {
                    if (!userStats[user]) {
                        userStats[user] = {
                            total: 0,
                            completed: 0,
                            inProgress: 0,
                            overdue: 0
                        };
                    }

                    userStats[user].total++;
                    
                    if (task.status === 'completed') {
                        userStats[user].completed++;
                    } else if (task.status === 'in-progress') {
                        userStats[user].inProgress++;
                    }

                    if (task.status !== 'completed' && new Date(task.dueDate) < new Date()) {
                        userStats[user].overdue++;
                    }
                });
            }
        });

        // Calculate completion rates
        Object.keys(userStats).forEach(user => {
            const stats = userStats[user];
            stats.completionRate = stats.total > 0 
                ? Math.round((stats.completed / stats.total) * 100)
                : 0;
        });

        return userStats;
    },

    // Get timeline analytics
    getTimelineAnalytics: function(tasks) {
        const now = new Date();
        const periods = [
            { name: 'This Week', days: 7 },
            { name: 'Next Week', days: 14 },
            { name: 'This Month', days: 30 },
            { name: 'Next Month', days: 60 },
            { name: 'This Quarter', days: 90 }
        ];

        return periods.map(period => {
            const endDate = new Date(now.getTime() + (period.days * 24 * 60 * 60 * 1000));
            const periodTasks = tasks.filter(task => {
                const dueDate = new Date(task.dueDate);
                return dueDate >= now && dueDate <= endDate;
            });

            const onTime = periodTasks.filter(task => 
                task.status === 'completed' && new Date(task.dueDate) >= new Date()
            ).length;

            const overdue = periodTasks.filter(task => 
                task.status !== 'completed' && new Date(task.dueDate) < new Date()
            ).length;

            return {
                period: period.name,
                total: periodTasks.length,
                onTime,
                overdue,
                onTimeRate: periodTasks.length > 0 
                    ? Math.round((onTime / periodTasks.length) * 100)
                    : 0
            };
        });
    },

    // Get priority analytics
    getPriorityAnalytics: function(tasks) {
        const priorities = ['urgent', 'high', 'medium', 'low'];
        const stats = {};

        priorities.forEach(priority => {
            const priorityTasks = tasks.filter(t => t.priority === priority);
            const completed = priorityTasks.filter(t => t.status === 'completed');
            
            let avgDaysToComplete = 0;
            if (completed.length > 0) {
                const totalDays = completed.reduce((sum, task) => {
                    const created = new Date(task.createdAt);
                    const due = new Date(task.dueDate);
                    const days = Math.ceil((due - created) / (1000 * 60 * 60 * 24));
                    return sum + days;
                }, 0);
                avgDaysToComplete = Math.round(totalDays / completed.length);
            }

            stats[priority] = {
                total: priorityTasks.length,
                completed: completed.length,
                avgDaysToComplete,
                completionRate: priorityTasks.length > 0 
                    ? Math.round((completed.length / priorityTasks.length) * 100)
                    : 0
            };
        });

        return stats;
    },

    // Calculate on-time completion rate
    getOnTimeCompletionRate: function(tasks) {
        const completedTasks = tasks.filter(t => t.status === 'completed');
        if (completedTasks.length === 0) return 0;

        const onTimeCompletions = completedTasks.filter(task => {
            // For completed tasks, check if they were completed before or on due date
            // Since we don't have completion date, we'll assume recent updates mean recent completion
            return true; // Simplified for this implementation
        }).length;

        return Math.round((onTimeCompletions / completedTasks.length) * 100);
    },

    // Helper function to get week start
    getWeekStart: function(date) {
        const d = new Date(date);
        const day = d.getDay();
        const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday
        return new Date(d.setDate(diff));
    }
};
